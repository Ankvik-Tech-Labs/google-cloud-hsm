name: Tests

on:
  push:
    branches:
      - "main"
      - "feature/**"
      - "release/**"
      - "feat/**"
  pull_request:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    environment: ${{ (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && 'integration-tests' || '' }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install hatch pre-commit
          hatch env create

      - name: Lint and typecheck
        run: |
          hatch run lint:lint-check

      - name: Unit Tests
        run: |
          hatch run test:pytest tests/unit

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1.3.1

      - name: Start Anvil
        if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
        env:
          WEB3_PROVIDER_URI: ${{ secrets.WEB3_PROVIDER_URI }}
        run: |
          max_retries=3
          retry_count=0
          start_anvil() {
            anvil --fork-url $WEB3_PROVIDER_URI --balance 100000000 &
            ANVIL_PID=$!
            echo "ANVIL_PID=$ANVIL_PID" >> $GITHUB_ENV
            sleep 5
            # Check if anvil is running
            if ps -p $ANVIL_PID > /dev/null; then
              echo "Anvil started successfully with PID $ANVIL_PID"
              return 0
            else
              echo "Anvil failed to start"
              return 1
            fi
          }

          until start_anvil || [ $retry_count -eq $max_retries ]; do
            retry_count=$((retry_count+1))
            echo "Anvil start attempt $retry_count of $max_retries failed. Retrying in 15 seconds..."
            sleep 15
          done

          if [ $retry_count -eq $max_retries ]; then
            echo "Failed to start Anvil after $max_retries attempts"
            exit 1
          fi

      - name: Integration Tests
        if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: "/tmp/credentials.json"
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_REGION: ${{ secrets.GOOGLE_CLOUD_REGION }}
          KEY_RING: ${{ secrets.KEY_RING }}
          KEY_NAME: ${{ secrets.KEY_NAME }}
          RUN_INTEGRATION_TESTS: "true"
        run: |
          # Write credentials
          echo "${{ secrets.ENCODED_GOOGLE_APPLICATION_CREDENTIALS }}" | base64 --decode > $GOOGLE_APPLICATION_CREDENTIALS

          # Run tests
          hatch run test:pytest tests/integration

          # Clean up credentials immediately after use
          rm -f $GOOGLE_APPLICATION_CREDENTIALS

      - name: Stop Anvil
        if: always()  # Run even if tests fail
        run: |
          kill $ANVIL_PID || true

      - name: Cleanup Sensitive Data
        if: always()  # Run even if previous steps fail
        run: |
          # Clean up any remaining sensitive files
          rm -f /tmp/credentials.json
          # Clear environment variables
          unset GOOGLE_APPLICATION_CREDENTIALS
          unset GOOGLE_CLOUD_PROJECT
          unset GOOGLE_CLOUD_REGION
          unset KEY_RING
          unset KEY_NAME
          unset WEB3_PROVIDER_URI
